Program.Sub.ScreenSU.Start
Gui.Form..Create(BaseForm)
Gui.Form..Caption("Upload Router & WO")
Gui.Form..Size(4080,3195)
Gui.Form..MinX(0)
Gui.Form..MinY(0)
Gui.Form..Position(0,0)
Gui.Form..AlwaysOnTop(True)
Gui.Form..FontName("Tahoma")
Gui.Form..FontSize(8.25)
Gui.Form..ControlBox(True)
Gui.Form..MaxButton(False)
Gui.Form..MinButton(True)
Gui.Form..MousePointer(0)
Gui.Form..Moveable(True)
Gui.Form..Sizeable(False)
Gui.Form..ShowInTaskBar(True)
Gui.Form..TitleBar(True)
Gui.Form..Event(UnLoad,Form_UnLoad)
Gui.Form.cmdBrowse.Create(Button)
Gui.Form.cmdBrowse.Enabled(True)
Gui.Form.cmdBrowse.Visible(True)
Gui.Form.cmdBrowse.Zorder(0)
Gui.Form.cmdBrowse.Size(1155,345)
Gui.Form.cmdBrowse.Position(480,2175)
Gui.Form.cmdBrowse.Caption("BROWSE")
Gui.Form.cmdBrowse.FontName("Tahoma")
Gui.Form.cmdBrowse.FontSize(8.25)
Gui.Form.cmdBrowse.Event(Click,cmdBrowse_Click)
Gui.Form.chkRouter.Create(CheckBox)
Gui.Form.chkRouter.Enabled(True)
Gui.Form.chkRouter.Visible(True)
Gui.Form.chkRouter.Zorder(0)
Gui.Form.chkRouter.Size(2010,300)
Gui.Form.chkRouter.Position(390,285)
Gui.Form.chkRouter.Caption("Upload New Routers")
Gui.Form.chkRouter.FontName("Tahoma")
Gui.Form.chkRouter.FontSize(8.25)
Gui.Form.chkRouter.Value(1)
Gui.Form.chkWO.Create(CheckBox)
Gui.Form.chkWO.Enabled(True)
Gui.Form.chkWO.Visible(True)
Gui.Form.chkWO.Zorder(0)
Gui.Form.chkWO.Size(2145,300)
Gui.Form.chkWO.Position(390,705)
Gui.Form.chkWO.Caption("Upload New WorkOrder")
Gui.Form.chkWO.FontName("Tahoma")
Gui.Form.chkWO.FontSize(8.25)
Gui.Form.chkWO.Value(1)
Gui.Form.chkDownload.Create(CheckBox)
Gui.Form.chkDownload.Enabled(True)
Gui.Form.chkDownload.Visible(False)
Gui.Form.chkDownload.Zorder(0)
Gui.Form.chkDownload.Size(2415,300)
Gui.Form.chkDownload.Position(390,1470)
Gui.Form.chkDownload.Caption("Download Schedule to APS")
Gui.Form.chkDownload.FontName("Tahoma")
Gui.Form.chkDownload.FontSize(8.25)
Gui.Form.chkDownload.Value(1)
Gui.Form.chkLink.Create(CheckBox)
Gui.Form.chkLink.Enabled(True)
Gui.Form.chkLink.Visible(True)
Gui.Form.chkLink.Zorder(0)
Gui.Form.chkLink.Size(2070,300)
Gui.Form.chkLink.Position(390,1080)
Gui.Form.chkLink.Caption("Link WorkOrder")
Gui.Form.chkLink.FontName("Tahoma")
Gui.Form.chkLink.FontSize(8.25)
Gui.Form.chkLink.Value(1)
Gui.Form.cmdUpload.Create(Button)
Gui.Form.cmdUpload.Visible(True)
Gui.Form.cmdUpload.Zorder(0)
Gui.Form.cmdUpload.Size(1125,345)
Gui.Form.cmdUpload.Position(2130,2175)
Gui.Form.cmdUpload.Caption("UPLOAD")
Gui.Form.cmdUpload.FontName("Tahoma")
Gui.Form.cmdUpload.FontSize(8.25)
Gui.Form.cmdUpload.Event(Click,cmdUpload_Click)
Gui.Form.cmdUpload.Enabled(True)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
v.Global.sBuildRotr.Declare(String)
Program.External.Include.Library("6017.lib")
Program.External.Include.Library("5100.lib")
Program.External.Include.Library("500000.lib")
v.Global.bFileUpload.Declare(Boolean)
v.Global.bError.Declare(Boolean)
Program.Sub.Preflight.End

'ARC#6446
'Customer: TYCOS TOOLS
' Jan 2022  Nam Le

'Tycos creates their work order routers in a spread sheet and needs them uploaded to GSS. They
'would like us to create an automated process to select a file and upload the work orders with job
'operations, as well as the standard routers from an excel file.

'This program asks the user to select an Excel file for upload
'The Excel file's format is fixed and user must follow its standard
'The program will read the first 4 sheets of the file
'Sheet 1 contains the new Routers' header info
'Sheet 2 contains the new Routers' lines info
'Sheet 3 contains the new WO
'Sheet 4 contains the list of linked WO 
Program.Sub.Main.Start
f.Intrinsic.Control.Try
	gui.Form..Show
	
f.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.Main.End

Program.Sub.uploadRTR.Start
'arguments, Number, part, RunTime,  Comment, um, lmo,workcenter, overlap
'LMO need to be C for comment
'LMO needs to be L for workcenter
'LMO needs to be M for material RunTime is quantity when LMO is M
V.Local.iCt.Declare(Long)
V.Local.shold.Declare
V.Local.iPLine.Declare(Long)
V.Local.iPSeq.Declare(Long)
v.Local.sSQL.Declare
V.Local.sOp.Declare
V.Local.sDesc.Declare
V.Local.sLMO.Declare

'Router Number
F.Intrinsic.String.RPad(V.Args.Number," ",20,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,20,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Header Desc
F.Intrinsic.String.RPad(V.Args.Desc," ",30,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,30,V.Local.sHold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Sequence
F.Intrinsic.String.Format(V.Args.Sequence,"000000",V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'LMO
F.Intrinsic.String.RPad(V.Args.LMO," ",1,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,1,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Part
F.Intrinsic.String.RPad(V.Args.Part," ",20,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,20,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Workcenter
F.Intrinsic.String.RPad(V.Args.WC," ",4,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,4,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Seq Desc
F.Intrinsic.String.RPad(V.Args.Seq_Desc," ",30,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,30,V.Local.sDesc)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Setup
F.Intrinsic.String.LPad(v.Args.setuptime," ",16,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,16,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Runtime/Material
F.Intrinsic.Control.If(V.Args.RunTime.Trim,<>,"")
	F.Intrinsic.String.LPad(V.Args.RunTime," ",16,V.Local.shold)
F.Intrinsic.Control.Else
	F.Intrinsic.String.LPad("00000000000.0000"," ",16,V.Local.shold)
F.Intrinsic.Control.EndIf
F.Intrinsic.String.Left(V.Local.shold,16,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Customer
F.Intrinsic.String.RPad(v.Args.customer," ",6,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,6,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Orig Date
F.Intrinsic.String.Format(V.Ambient.Date,"MMDDYY",v.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Op Code
F.Intrinsic.String.RPad(v.Args.OpCode," ",6,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,6,V.Local.sOp)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Rate
F.Intrinsic.Control.If(V.Args.Rate,=,"")
	V.Local.shold.Set("00000000000.0000")
F.Intrinsic.Control.Else
	F.Intrinsic.Control.If(V.Args.Rate,=,0)
		V.Local.shold.Set("00000000000.0000")
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Format(V.Args.Rate,"#.0000",V.Local.shold)
		F.Intrinsic.String.LPad(V.Local.shold,"0",16,V.Local.shold)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'UM
F.Intrinsic.String.RPad(V.Args.UM," ",2,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,2,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Desc 1-3
F.Intrinsic.String.RPad(""," ",71,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,71,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)
F.Intrinsic.String.RPad(""," ",71,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,71,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)
F.Intrinsic.String.RPad(""," ",71,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,71,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Quantity 1-10
F.Intrinsic.String.LPad(V.Args.Qty1,"0",16,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)
F.Intrinsic.String.LPad(V.Args.Qty2,"0",16,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)
F.Intrinsic.String.LPad(V.Args.Qty3,"0",16,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)
F.Intrinsic.String.LPad(V.Args.Qty4,"0",16,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Purge
F.Intrinsic.String.LPad(""," ",1,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,1,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Frequency
F.Intrinsic.String.LPad(""," ",16,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,16,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Machine
F.Intrinsic.String.LPad("0.00","0",16,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,16,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Overlap
F.Intrinsic.String.LPad(""," ",16,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,16,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'WC Factor
f.Intrinsic.String.Concat(v.Global.sBuildRotr,"                ",v.Global.sBuildRotr)

'Min Flag
f.Intrinsic.String.Concat(v.Global.sBuildRotr,"N",v.Global.sBuildRotr)

'Min Outside
F.Intrinsic.String.LPad("0.0000"," ",16,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,16,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Crew Size
F.Intrinsic.String.LPad("0.0000"," ",16,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,16,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Lead Time
F.Intrinsic.String.LPad(V.Args.LeadTime," ",16,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,16,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Part Loc
F.Intrinsic.String.RPad(""," ",2,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,2,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Tooling Switch
F.Intrinsic.String.RPad(""," ",1,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,1,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Sort Code
F.Intrinsic.String.RPad(""," ",20,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,20,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Drawing No
F.Intrinsic.String.RPad(""," ",30,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,30,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'PAD
F.Intrinsic.String.RPad(" "," ",250,V.Local.shold)
F.Intrinsic.String.Concat(v.global.sBuildRotr,V.Local.shold,v.global.sBuildRotr)

'Scrap
F.Intrinsic.String.LPad("0.000"," ",16,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,16,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Cust Part
F.Intrinsic.String.RPad(v.Args.custpart," ",20,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,20,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Sort 1
F.Intrinsic.String.RPad(""," ",20,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,20,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Sort 2
F.Intrinsic.String.RPad(""," ",20,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,20,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Commission
F.Intrinsic.String.LPad("0.00"," ",16,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,16,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Quantities
F.Intrinsic.String.LPad(V.Args.Qty5,"0",16,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)
F.Intrinsic.String.LPad(V.Args.Qty6,"0",16,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)
F.Intrinsic.String.LPad(V.Args.Qty7,"0",16,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)
F.Intrinsic.String.LPad(V.Args.Qty8,"0",16,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)
F.Intrinsic.String.LPad(V.Args.Qty9,"0",16,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)
F.Intrinsic.String.LPad(V.Args.Qty10,"0",16,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Signoff User
F.Intrinsic.String.RPad(""," ",8,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,8,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Signoff Type
F.Intrinsic.String.RPad(""," ",1,V.Local.shold)
F.Intrinsic.String.Left(V.Local.shold,1,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

'Prod Line
F.Intrinsic.String.lpad(V.Args.PL.UCase," ",2,V.Local.shold)
f.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Local.shold,v.Global.sBuildRotr)

F.Intrinsic.String.Concat(v.Global.sBuildRotr,v.Ambient.NewLine,v.Global.sBuildRotr)
Program.Sub.uploadRTR.End

'get list of Router from DB and upload
Program.Sub.UploadRouterFromDB.Start
f.Intrinsic.Control.Try
	v.Local.sSQL.Declare(String)
	v.Local.sRet.Declare(String)
	v.Local.iCounter.Declare(Long)
	v.Local.iCounter_Line.Declare(Long)
	V.Local.sfiledir.Declare(String)
	V.Local.sfilename.Declare(String)
	
	f.Intrinsic.Control.If(v.DataTable.dtRouterRef.Exists)
		f.Data.Datatable.Close("dtRouterRef")
	f.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("select H.ROUTER ROUTER from GCG_6446_ROUTER_HD H inner join GCG_6446_ROUTER_LINES L on RTRIM(H.ROUTER) = RTRIM(L.ROUTER) where H.GS_USER='{0}' group by H.ROUTER", v.Caller.User, v.Local.sSQL)
	f.Data.Datatable.CreateFromSQL("dtRouterRef","Con", v.Local.sSQL, True)
	
	'record exists
	f.Intrinsic.Control.If(v.DataTable.dtRouterRef.RowCount,>,0)
		'loop and write file
		f.Intrinsic.Control.For(v.Local.iCounter, 0, v.DataTable.dtRouterRef.RowCount--,1)
			f.Intrinsic.String.Build("select RTRIM(H.ROUTER) ROUTER, RTRIM(H.ROUTER_DESC) ROUTER_DESC, RTRIM(H.PRODUCT_LINE) PL, RTRIM(H.UM) UM, RTRIM(H.CUSTOMER_CODE) CUSTOMER, RTRIM(L.SEQ) SEQ, RTRIM(L.WORKCENTER_PART) WC, RTRIM(L.OP_CODE) OP, RTRIM(L.WC_DESC) WC_DESC, RTRIM(L.WC_FACTOR) WC_FACTOR, RTRIM(L.RUNTIME) RUNTIME, RTRIM(L.RATE) RATE, RTRIM(L.PROJECT_GROUP) PROJECT_GROUP, RTRIM(L.LMO) LMO from GCG_6446_ROUTER_HD H inner join GCG_6446_ROUTER_LINES L on RTRIM(H.ROUTER)=RTRIM(L.ROUTER) where RTRIM(H.ROUTER) = '{0}' and RTRIM(H.GS_USER) = '{1}'", v.DataTable.dtRouterRef(v.Local.iCounter).ROUTER!FieldValTrim, v.Caller.User, v.Local.sSQL)
			
			f.Intrinsic.Control.If(v.DataTable.dtRouterInfo.Exists)
				f.Data.Datatable.Close("dtRouterInfo")
			f.Intrinsic.Control.EndIf
			f.Data.Datatable.CreateFromSQL("dtRouterInfo", "Con", v.Local.sSQL)
			
			'skip if router has no lines
			f.Intrinsic.Control.If(v.DataTable.dtRouterInfo.RowCount,=,0)
				f.Intrinsic.Control.Next(v.Local.iCounter)
			f.Intrinsic.Control.EndIf
			
			v.Local.iCounter_Line.Set(0)
			'lines
			f.Intrinsic.Control.For(v.Local.iCounter_Line, 0, v.DataTable.dtRouterInfo.RowCount--,1)
				f.Intrinsic.Control.CallSub(uploadRTR, "Number", v.DataTable.dtRouterInfo(v.Local.iCounter_Line).ROUTER!FieldValTrim, "Desc", v.DataTable.dtRouterInfo(v.Local.iCounter_Line).ROUTER_DESC!FieldValTrim, "PL", v.DataTable.dtRouterInfo(v.Local.iCounter_Line).PL!FieldValTrim, "Seq_Desc", v.DataTable.dtRouterInfo(v.Local.iCounter_Line).WC_DESC!FieldValTrim, "UM", v.DataTable.dtRouterInfo(v.Local.iCounter_Line).UM!FieldValTrim, "Rate", v.DataTable.dtRouterInfo(v.Local.iCounter_Line).RATE!FieldValTrim, "RunTime", v.DataTable.dtRouterInfo(v.Local.iCounter_Line).RUNTIME!FieldValTrim, "LMO", v.DataTable.dtRouterInfo(v.Local.iCounter_Line).LMO!FieldValTrim, "WC", v.DataTable.dtRouterInfo(v.Local.iCounter_Line).WC!FieldValTrim, "Customer", v.DataTable.dtRouterInfo(v.Local.iCounter_Line).CUSTOMER!FieldValTrim, "OpCode", v.DataTable.dtRouterInfo(v.Local.iCounter_Line).OP!FieldValTrim, "LeadTime", "", "Qty10","", "Qty9","","Qty8","", "Qty7","","Qty6","","Qty5","", "Qty4","", "Qty3","","Qty2","", "Qty1","", "Sequence", v.DataTable.dtRouterInfo(v.Local.iCounter_Line).SEQ!FieldValTrim, "SetupTime","", "CustPart","", "Part", v.DataTable.dtRouterInfo(v.Local.iCounter_Line).WC!FieldValTrim)
 			f.Intrinsic.Control.Next(v.Local.iCounter_Line)
 			
		'Bring string into file
		V.Local.sfilename.Set("ROUTERHD.TXT")
		F.Intrinsic.String.Concat(V.Caller.FilesDir,"\",V.Local.sfilename,V.Local.sfiledir)
		F.Intrinsic.File.String2File(V.Local.sfiledir,V.Global.sBuildRotr)
		
		f.Intrinsic.Control.Next(v.Local.iCounter)
		
		'Upload into Global Shop
		F.Global.General.CallWrapperSync(50,"UPLRTRH/A/X")
		
		'OBMIT_FROM_WO
		f.Intrinsic.String.Build("update ROUTER_LINE set OMIT_FROM_WO='Y' where RTRIM(ROUTER)+'-'+RTRIM(LINE_ROUTER)+'-'+RTRIM(PART_WC_OUTSIDE) in (select RTRIM(ROUTER)+'-'+RTRIM(SEQ)+'-'+RTRIM(WORKCENTER_PART) from GCG_6446_ROUTER_LINES where GS_USER='{0}' and RTRIM(OMIT_FROM_WO)='Y')", v.Caller.User, v.Local.sSQL)
		f.ODBC.Connection!Con.Execute(v.Local.sSQL)
		
		'PROJECT GROUP
		f.Intrinsic.String.Build("select RTRIM(H.ROUTER) ROUTER, RTRIM(H.ROUTER_DESC) ROUTER_DESC, RTRIM(H.PRODUCT_LINE) PL, RTRIM(H.UM) UM, RTRIM(H.CUSTOMER_CODE) CUSTOMER, RTRIM(L.SEQ) SEQ, RTRIM(L.WORKCENTER_PART) WC, RTRIM(L.OP_CODE) OP, RTRIM(L.WC_DESC) WC_DESC, RTRIM(L.WC_FACTOR) WC_FACTOR, RTRIM(L.RUNTIME) RUNTIME, RTRIM(L.RATE) RATE, RTRIM(L.PROJECT_GROUP) PROJECT_GROUP, RTRIM(L.LMO) LMO from GCG_6446_ROUTER_HD H inner join GCG_6446_ROUTER_LINES L on RTRIM(H.ROUTER)=RTRIM(L.ROUTER) where RTRIM(H.GS_USER) = '{0}'", v.Caller.User, v.Local.sSQL)
		f.Intrinsic.Control.If(v.DataTable.dtRouterInfo.Exists)
			f.Data.Datatable.Close("dtRouterInfo")
		f.Intrinsic.Control.EndIf
		f.Data.Datatable.CreateFromSQL("dtRouterInfo", "Con", v.Local.sSQL)
		v.Local.iCounter_Line.Set(0)
		f.Intrinsic.Control.For(v.Local.iCounter_Line, 0, v.DataTable.dtRouterInfo.RowCount--,1)
			f.Intrinsic.String.Build("update ROUTER_LINE set PROJ_GROUP='{0}' where RTRIM(ROUTER)='{1}' and LINE_ROUTER='{2}' and RTRIM(PART_WC_OUTSIDE)='{3}'", v.DataTable.dtRouterInfo(v.Local.iCounter_Line).PROJECT_GROUP!FieldValTrim, v.DataTable.dtRouterInfo(v.Local.iCounter_Line).ROUTER!FieldValTrim, v.DataTable.dtRouterInfo(v.Local.iCounter_Line).SEQ!FieldValTrim, v.DataTable.dtRouterInfo(v.Local.iCounter_Line).WC!FieldValTrim, v.Local.sSQL)
			f.ODBC.Connection!Con.Execute(v.Local.sSQL)
 		f.Intrinsic.Control.Next(v.Local.iCounter_Line)
		
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
	f.Intrinsic.Control.End
f.Intrinsic.Control.EndTry
Program.Sub.UploadRouterFromDB.End

'get list of Jobs from DB and upload
Program.Sub.UploadJobFromDB.Start
f.Intrinsic.Control.Try
	v.Local.sSQL.Declare(String)
	v.Local.sRet.Declare(String)
	v.Local.iCounter.Declare(String)
	v.Local.sDueDate.Declare(String)
	
	f.Intrinsic.String.Build("select * from GCG_6446_JOB_HD where GS_USER='{0}'", v.Caller.User, v.Local.sSQL)
	f.Intrinsic.Control.If(v.DataTable.dtJob.Exists)
		f.Data.Datatable.Close("dtJob")
	f.Intrinsic.Control.EndIf
	
	
	f.Data.Datatable.CreateFromSQL("dtJob", "Con", v.Local.sSQL, True)
	
	
	'if there are jobs
	f.Intrinsic.Control.If(v.DataTable.dtJob.RowCount,>,0)
		f.Intrinsic.Control.For(v.Local.iCounter, 0, v.DataTable.dtJob.RowCount--,1)
		
			f.Intrinsic.String.Format(v.DataTable.dtJob(v.Local.iCounter).DUE_DATE!FieldValTrim, "MMDDYY", v.Local.sDueDate)	
			f.Data.Datatable.AddRow("6017", "WO", v.DataTable.dtJob(v.Local.iCounter).JOB!FieldValTrim, "WOSuffix", v.DataTable.dtJob(v.Local.iCounter).SUFFIX!FieldValTrim, "Part", v.DataTable.dtJob(v.Local.iCounter).PART!FieldValTrim, "Router", v.DataTable.dtJob(v.Local.iCounter).ROUTER_NUMBER!FieldValTrim, "WODesc", v.DataTable.dtJob(v.Local.iCounter).ROUTER_DESC!FieldValTrim, "CustNum", v.DataTable.dtJob(v.Local.iCounter).CUSTOMER!FieldValTrim, "RunQty", v.DataTable.dtJob(v.Local.iCounter).ORDER_QTY!FieldValTrim, "DueDate", v.Local.sDueDate, "PL", v.DataTable.dtJob(v.Local.iCounter).PRODUCT_LINE!FieldValTrim, "CustQty", v.DataTable.dtJob(v.Local.iCounter).CUSTOMER_QTY!FieldValTrim, "PartDesc", v.DataTable.dtJob(v.Local.iCounter).PART_DESC!FieldValTrim, "Project", v.DataTable.dtJob(v.Local.iCounter).PROJECT!FieldValTrim, "Priority", "000", "DateOpened", v.Ambient.Date.FormatMMDDYY)
			
		f.Intrinsic.Control.Next(v.Local.iCounter)
		
		'upload jobs
		f.Intrinsic.Control.CallSub(6017sync)
		
		'update to BACKWARD SCHEDULE
		'update JOB_HEADER set SCHEDULE_DIR = '1' where JOB in ()
		f.Intrinsic.String.Build("update JOB_HEADER set SCHEDULE_DIR='1', JOB_TYPE='L' where RTRIM(JOB)+'-'+RTRIM(SUFFIX) in (select RTRIM(JOB)+'-'+RTRIM(SUFFIX) from GCG_6446_JOB_HD where GS_USER='{0}')", v.Caller.User, v.Local.sSQL)
		f.ODBC.Connection!Con.Execute(v.Local.sSQL)
		
		'update PROJECT
		f.Intrinsic.String.Build("select PHASE from GCG_6446_JOB_HD where GS_USER ='{0}' group by PHASE", v.Caller.User, v.Local.sSQL)
		f.Intrinsic.Control.If(v.DataTable.dtPhase.Exists)
			f.Data.Datatable.Close("dtPhase")
		f.Intrinsic.Control.EndIf
		f.Data.Datatable.CreateFromSQL("dtPhase", "Con", v.Local.sSQL)
		
		f.Intrinsic.Control.If(v.DataTable.dtPhase.RowCount,>,0)
			v.Local.iCounter.Set(0)
			f.Intrinsic.Control.For(v.Local.iCounter,0,v.DataTable.dtPhase.RowCount--,1)
				f.Intrinsic.String.Build("update JOB_HEADER set PHASE='{0}' where RTRIM(JOB)+'-'+RTRIM(SUFFIX) in (select RTRIM(JOB)+'-'+RTRIM(SUFFIX) from GCG_6446_JOB_HD where GS_USER='{1}' and RTRIM(PHASE)='{0}')", v.DataTable.dtPhase(v.Local.iCounter).PHASE!FieldValTrim, v.Caller.User, v.Local.sSQL)
				f.ODBC.Connection!Con.Execute(v.Local.sSQL)
			f.Intrinsic.Control.Next(v.Local.iCounter)
		f.Intrinsic.Control.EndIf
		
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
	f.Intrinsic.Control.End
f.Intrinsic.Control.EndTry
Program.Sub.UploadJobFromDB.End

'Add Router to JOB
Program.Sub.AddRouterToJob.Start
f.Intrinsic.Control.Try
	v.Local.sSQL.Declare(String)
	v.Local.iCounter.Declare(Long)
	
	f.Intrinsic.String.Build("select RTRIM(JOB) JOB, RTRIM(SUFFIX) SUFFIX, RTRIM(ROUTER_NUMBER) ROUTER_NUMBER from GCG_6446_JOB_HD where GS_USER='{0}'", v.Caller.User, v.Local.sSQL)
	f.Intrinsic.Control.If(v.DataTable.dtJobRouter.Exists)
		f.Data.Datatable.Close("dtJobRouter")
	f.Intrinsic.Control.EndIf
	f.Data.Datatable.CreateFromSQL("dtJobRouter", "Con", v.Local.sSQL, True)
	
	f.Intrinsic.Control.If(v.DataTable.dtJobRouter.RowCount, >,0)
		f.Intrinsic.Control.For(v.Local.iCounter, 0, v.DataTable.dtJobRouter.RowCount--,1)
			f.Data.Datatable.AddRow("5100", "WO", v.DataTable.dtJobRouter(v.Local.iCounter).JOB!FieldValTrim, "WOSuffix", v.DataTable.dtJobRouter(v.Local.iCounter).SUFFIX!FieldValTrim, "Router", v.DataTable.dtJobRouter(v.Local.iCounter).ROUTER_NUMBER!FieldValTrim, "Schedule", "B")
		f.Intrinsic.Control.Next(v.Local.iCounter)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.CallSub(5100Sync)

f.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
	f.Intrinsic.Control.End
f.Intrinsic.Control.EndTry
Program.Sub.AddRouterToJob.End

'get list of linked jobs from DB and link to their Master
Program.Sub.AddLinkedJob.Start
f.Intrinsic.Control.Try
	v.Local.sSQL.Declare(String)
	v.Local.sRet.Declare(String)
	v.Local.iCounter.Declare(Long)
	v.Local.sSEQ.Declare(String)
	f.Intrinsic.String.Build("select * from GCG_6446_JOB_OPERATIONS where RTRIM(LMO)='X' and GS_USER='{0}'", v.Caller.User, v.Local.sSQL)
	f.Intrinsic.Control.If(v.DataTable.dtLinkedJob.Exists)
		f.Data.Datatable.Close("dtLinkedJob")
	f.Intrinsic.Control.EndIf
	
	f.Data.Datatable.CreateFromSQL("dtLinkedJob", "Con", v.Local.sSQL, True)
	f.Intrinsic.Control.If(v.DataTable.dtLinkedJob.RowCount,>,0)
		f.Intrinsic.Control.For(v.Local.iCounter, 0, v.DataTable.dtLinkedJob.RowCount--,1)
			'lpad leading 0 for Excel trim them off
			f.Intrinsic.String.LPad(v.DataTable.dtLinkedJob(v.Local.iCounter).SEQ!FieldValTrim, "0", 6, v.Local.sSEQ)
			
			'delete old record if any
			f.Intrinsic.String.Build("delete from JOB_OPERATIONS where RTRIM(JOB)='{0}' and RTRIM(SUFFIX)='{1}' and RTRIM(PART)='{2}' and LMO='X'", v.DataTable.dtLinkedJob(v.Local.iCounter).JOB!FieldValTrim, v.DataTable.dtLinkedJob(v.Local.iCounter).SUFFIX!FieldValTrim, v.DataTable.dtLinkedJob(v.Local.iCounter).WORKCENTER!FieldValTrim, v.Local.sSQL)
			f.ODBC.Connection!Con.Execute(v.Local.sSQL)
			
			f.Intrinsic.String.Build("insert into JOB_OPERATIONS (JOB, SUFFIX, SEQ, WO_INSERT, LMO, PART, ROUTER_SEQ) values('{0}', '{1}', '{2}', '00', 'X', '{3}', '000000')", v.DataTable.dtLinkedJob(v.Local.iCounter).JOB!FieldValTrim, v.DataTable.dtLinkedJob(v.Local.iCounter).SUFFIX!FieldValTrim, v.Local.sSEQ, v.DataTable.dtLinkedJob(v.Local.iCounter).WORKCENTER!FieldValTrim, v.Local.sSQL)
			f.ODBC.Connection!Con.Execute(v.Local.sSQL)
			
			f.Intrinsic.String.Build("update JOB_HEADER set JOB_TYPE='L' where RTRIM(JOB)+' '+RTRIM(SUFFIX)='{0}'", v.DataTable.dtLinkedJob(v.Local.iCounter).WORKCENTER!FieldValTrim, v.Local.sSQL)
			f.ODBC.Connection!Con.Execute(v.Local.sSQL)
		f.Intrinsic.Control.Next(v.Local.iCounter)
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
	f.Intrinsic.Control.End
f.Intrinsic.Control.EndTry
Program.Sub.AddLinkedJob.End

'schedule jobs
Program.Sub.ScheduleJobsFromDB.Start
f.Intrinsic.Control.Try
	v.Local.dDueDate.Declare(Date)
	v.Local.sSQL.Declare(String)
	v.Local.sRet.Declare(String)
	v.Local.iCounter.Declare(Long)
	v.Local.sSEQ.Declare(String)
	
	f.Intrinsic.String.Build("select RTRIM(J.JOB) JOB, RTRIM(J.SUFFIX) SUFFIX, 'B' SCH_DIR, H.DATE_DUE DATE_DUE from GCG_6446_JOB_OPERATIONS J left join V_JOB_HEADER H on RTRIM(J.JOB) = RTRIM(H.JOB) and RTRIM(J.SUFFIX) = RTRIM(H.SUFFIX) where RTRIM(LMO)='X' and GS_USER='SUPERVSR' group by J.JOB, J.SUFFIX, H.DATE_DUE", v.Caller.User, v.Local.sSQL)
	f.Intrinsic.Control.If(v.DataTable.dtScheduleJob.Exists)
		f.Data.Datatable.Close("dtScheduleJob")
	f.Intrinsic.Control.EndIf
	
	f.Data.Datatable.CreateFromSQL("dtScheduleJob", "Con", v.Local.sSQL, True)
	f.Intrinsic.Control.If(v.DataTable.dtScheduleJob.RowCount,>,0)
		f.Intrinsic.Control.For(v.Local.iCounter, 0, v.DataTable.dtScheduleJob.RowCount--,1)
			f.Global.APS.ScheduleJob(v.DataTable.dtScheduleJob(v.Local.iCounter).JOB!FieldValTrim, v.DataTable.dtScheduleJob(v.Local.iCounter).SUFFIX!FieldValTrim, v.DataTable.dtScheduleJob(v.Local.iCounter).SCH_DIR!FieldValTrim, v.DataTable.dtScheduleJob(v.Local.iCounter).DATE_DUE!FieldVal)			
		f.Intrinsic.Control.Next(v.Local.iCounter)
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
	f.Intrinsic.Control.End
f.Intrinsic.Control.EndTry
Program.Sub.ScheduleJobsFromDB.End

'download schedule file
Program.Sub.DownloadScheduleFile.Start
f.Intrinsic.Control.Try
	f.Data.Datatable.AddRow("500000", "Mode", "SP")
	f.Intrinsic.Control.CallSub(500000sync)
f.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.DownloadScheduleFile.End

'browse and read file
'store the 4 sheets into custom tables by user
Program.Sub.cmdBrowse_Click.Start
f.Intrinsic.Control.Try
	v.Local.sFile.Declare(String)
	v.Local.sRet.Declare(String)
	v.Local.bInString.Declare(Boolean)
	v.Local.bExists.Declare(Boolean)
	v.Local.sRouter.Declare(String)
	v.Local.sRouterLines.Declare(String)
	v.Local.sWO.Declare(String)
	v.Local.sWOOperations.Declare(String)
	v.Local.sSQL.Declare(String)
	
	'file dialog
	f.Intrinsic.UI.ShowOpenFileDialog("", "*.xls", "", v.Local.sFile)
	
	#Region "Validate File"
	'CANCEL
	f.Intrinsic.Control.If(v.Local.sFile,=,"***CANCEL***")
		'unload
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'File Exists
	f.Intrinsic.File.Exists(v.Local.sFile, v.Local.bExists)
	f.Intrinsic.Control.If(v.Local.bExists,=,False)
		f.Intrinsic.UI.Msgbox("File does not exists.")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'Extension
	f.Intrinsic.String.IsInString(v.Local.sFile, ".xls", True, v.Local.bInString)
	
	f.Intrinsic.Control.If(v.Local.bInString,=,False)
		f.Intrinsic.UI.Msgbox("Invalid file. Must be MS Excel.")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	#End Region
	
	f.Intrinsic.UI.InvokeWaitDialog("Reading File...")
	gui.Form..Enabled(False)
	'read file
	f.Automation.MSExcel.ReadSpreadsheet(v.Local.sFile, v.Local.sRet)
	f.Intrinsic.String.Split(v.Local.sRet, "&^&", v.Local.sRet)
	
	'get rid of header
	#Region "Remove header"
	'Router
	f.Intrinsic.String.Split(v.Local.sRet(0), "$!$", v.Local.sRouter)
	v.Local.sRouter(0).Set("REMOVEDHEADER")
	f.Intrinsic.String.Join(v.Local.sRouter, "$!$", v.Local.sRouter)
	f.Intrinsic.String.Replace(v.Local.sRouter, "REMOVEDHEADER$!$", "", v.Local.sRouter)
	
	'Router Lines
	f.Intrinsic.String.Split(v.Local.sRet(1), "$!$", v.Local.sRouterLines)
	v.Local.sRouterLines(0).Set("REMOVEDHEADER")
	f.Intrinsic.String.Join(v.Local.sRouterLines, "$!$", v.Local.sRouterLines)
	f.Intrinsic.String.Replace(v.Local.sRouterLines, "REMOVEDHEADER$!$", "", v.Local.sRouterLines)
	
	'WO
	f.Intrinsic.String.Split(v.Local.sRet(2), "$!$", v.Local.sWO)
	v.Local.sWO(0).Set("REMOVEDHEADER")
	f.Intrinsic.String.Join(v.Local.sWO, "$!$", v.Local.sWO)
	f.Intrinsic.String.Replace(v.Local.sWO, "REMOVEDHEADER$!$", "", v.Local.sWO)
	
	'WO Op
	f.Intrinsic.String.Split(v.Local.sRet(3), "$!$", v.Local.sWOOperations)
	v.Local.sWOOperations(0).Set("REMOVEDHEADER")
	f.Intrinsic.String.Join(v.Local.sWOOperations, "$!$", v.Local.sWOOperations)
	f.Intrinsic.String.Replace(v.Local.sWOOperations, "REMOVEDHEADER$!$", "", v.Local.sWOOperations)
	
	#End Region 'Remove header
	
	'read into datatables
	f.Data.Datatable.CreateFromString("dtRouter", v.Local.sRouter, "ROUTER*!*ROUTER_DESC*!*PRODUCT_LINE*!*UM*!*CUSTOMER_CODE", "string*!*string*!*string*!*string*!*string", "*!*", "$!$")
	f.Data.Datatable.CreateFromString("dtRouterLines", v.Local.sRouterLines, "ROUTER*!*SEQ*!*LMO*!*WORKCENTER_PART*!*OP_CODE*!*WC_DESC*!*WC_FACTOR*!*RUNTIME*!*RATE*!*PROJECT_GROUP*!*OMIT_FROM_WO", "string*!*string*!*string*!*string*!*string*!*string*!*string*!*string*!*string*!*string*!*string", "*!*", "$!$")
	f.Data.Datatable.CreateFromString("dtWO", v.Local.sWO, "JOB*!*SUFFIX*!*ROUTER_NUMBER*!*ROUTER_DESC*!*PART*!*PART_DESC*!*CUSTOMER*!*PRODUCT_LINE*!*PROJECT*!*PHASE*!*UM*!*DUE_DATE*!*ORDER_QTY*!*CUSTOMER_QTY*!*JOB_TYPE*!*SCHEDULE", "string*!*string*!*string*!*string*!*string*!*string*!*string*!*string*!*string*!*string*!*string*!*string*!*string*!*string*!*string*!*string", "*!*", "$!$")
	f.Data.Datatable.CreateFromString("dtWO_Operations", v.Local.sWOOperations, "JOB*!*SUFFIX*!*SEQ*!*LMO*!*WORKCENTER*!*OP_CODE*!*DESCRIPTION*!*WC_FACTOR*!*RUNTIME*!*RATE*!*PROJECT_GROUP", "string*!*string*!*string*!*string*!*string*!*string*!*string*!*string*!*string*!*string*!*string", "*!*", "$!$")
	
	'add user
	#Region "Add USER"
	f.Data.Datatable.AddColumn("dtRouter", "GS_USER", "string")
	f.Data.Datatable.AddColumn("dtRouterLines", "GS_USER", "string")
	f.Data.Datatable.AddColumn("dtWO", "GS_USER", "string")
	f.Data.Datatable.AddColumn("dtWO_Operations", "GS_USER", "string")
	
	f.Data.Datatable.SetValue("dtRouter", -1, "GS_USER", v.Caller.User)
	f.Data.Datatable.SetValue("dtRouterLines", -1, "GS_USER", v.Caller.User)
	f.Data.Datatable.SetValue("dtWO", -1, "GS_USER", v.Caller.User)
	f.Data.Datatable.SetValue("dtWO_Operations", -1, "GS_USER", v.Caller.User)
	
	f.Data.Datatable.AcceptChanges("dtRouter")
	f.Data.Datatable.AcceptChanges("dtRouterLines")
	f.Data.Datatable.AcceptChanges("dtWO")
	f.Data.Datatable.AcceptChanges("dtWO_Operations")
	
	#End Region
	
	f.ODBC.Connection!Con.OpenCompanyConnection 
	
	'delete old record
	f.Intrinsic.String.Build("delete from GCG_6446_JOB_HD where GS_USER='{0}'", v.Caller.User, v.Local.sSQL)
	f.ODBC.Connection!Con.Execute(v.Local.sSQL)
	f.Intrinsic.String.Build("delete from GCG_6446_JOB_OPERATIONS where GS_USER='{0}'", v.Caller.User, v.Local.sSQL)
	f.ODBC.Connection!Con.Execute(v.Local.sSQL)
	f.Intrinsic.String.Build("delete from GCG_6446_ROUTER_HD where GS_USER='{0}'", v.Caller.User, v.Local.sSQL)
	f.ODBC.Connection!Con.Execute(v.Local.sSQL)
	f.Intrinsic.String.Build("delete from GCG_6446_ROUTER_LINES where GS_USER='{0}'", v.Caller.User, v.Local.sSQL)
	f.ODBC.Connection!Con.Execute(v.Local.sSQL)

	'write to DB
	f.Data.Datatable.SaveToDB("dtRouter", "Con", "GCG_6446_ROUTER_HD", "ROUTER*!*GS_USER",256)
	f.Data.Datatable.SaveToDB("dtRouterLines", "Con", "GCG_6446_ROUTER_LINES", "ROUTER*!*SEQ*!*GS_USER",256)
	f.Data.Datatable.SaveToDB("dtWO", "Con", "GCG_6446_JOB_HD", "JOB*!*SUFFIX*!*ROUTER_NUMBER*!*GS_USER",256)
	f.Data.Datatable.SaveToDB("dtWO_Operations", "Con", "GCG_6446_JOB_OPERATIONS", "JOB*!*SUFFIX*!*WORKCENTER*!*GS_USER",256)
	
	f.Intrinsic.UI.CloseWaitDialog
	f.Intrinsic.UI.Msgbox("Finish Reading. Ready for Upload")
	gui.Form..Enabled(True)
	
	v.Global.bFileUpload.Set(True)
f.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox("Error in Reading File. Please Rework the File before Re-Upload.")
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
f.Intrinsic.Control.Finally
	f.ODBC.Connection!Con.Close
f.Intrinsic.Control.EndTry
Program.Sub.cmdBrowse_Click.End

'upload the read data into GSS: 
'	Upload Router
'	Upload WO
'	Add Linked WO
'	Schedule WO
Program.Sub.cmdUpload_Click.Start
f.Intrinsic.Control.Try
	f.Intrinsic.Control.If(v.Global.bFileUpload,=,False)
		f.Intrinsic.UI.Msgbox("Please Browse a File Before Upload.")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
		
	gui.Form..Enabled(False)

	f.ODBC.Connection!Con.OpenCompanyConnection(600)
	v.Local.bCheckRouter.Declare(Boolean)
	v.Local.bCheckWO.Declare(Boolean)
	v.Local.bLink.Declare(Boolean)
	v.Local.bDownload.Declare(Boolean)
	
	v.Local.bCheckRouter.Set(v.Screen.Form!chkRouter.Value)
	v.Local.bCheckWO.Set(v.Screen.Form!chkWO.Value)
	v.Local.bLink.Set(v.Screen.Form!chkLink.Value)
	v.Local.bDownload.Set(v.Screen.Form!chkDownload.Value)
	
	f.Intrinsic.UI.InvokeWaitDialog("Uploading...")
	
	'Upload Router
	f.Intrinsic.Control.If(v.Local.bCheckRouter)
		f.Intrinsic.UI.ChangeWaitStatus("Uploading Routers...")
		f.Intrinsic.Control.CallSub(UploadRouterFromDB)
	f.Intrinsic.Control.EndIf
	
	'Upload JOB
	f.Intrinsic.Control.If(v.Local.bCheckWO)
		f.Intrinsic.UI.ChangeWaitStatus("Uploading Jobs...")
		f.Intrinsic.Control.CallSub(UploadJobFromDB)

		'Add Router
		f.Intrinsic.UI.ChangeWaitStatus("Adding Job Operations...")
		f.Intrinsic.Control.CallSub(AddRouterToJob)
	f.Intrinsic.Control.EndIf

	'linked JOB
	f.Intrinsic.Control.If(v.Local.bLink)
		f.Intrinsic.UI.ChangeWaitStatus("Linking Jobs...")
		f.Intrinsic.Control.CallSub(AddLinkedJob)
		
		'Re-Schedule JOB
		f.Intrinsic.UI.ChangeWaitStatus("Scheduling Jobs...")
		f.Intrinsic.Control.CallSub(ScheduleJobsFromDB)
	f.Intrinsic.Control.EndIf

	f.ODBC.Connection!Con.Close
	
	'download schedule
	f.Intrinsic.Control.If(v.Local.bDownload)
		f.Intrinsic.Control.If(v.Global.bError,=,False)
'			f.Intrinsic.UI.ChangeWaitStatus("Downloading Schedule to APS...")
'			f.Intrinsic.Control.CallSub(DownloadScheduleFile)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf

	f.Intrinsic.UI.CloseWaitDialog
	
	f.Intrinsic.UI.Msgbox("Finish Uploading.")
	f.Intrinsic.Control.CallSub(Form_UnLoad)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.End
f.Intrinsic.Control.Finally
	f.ODBC.Connection!Con.Close
f.Intrinsic.Control.EndTry
Program.Sub.cmdUpload_Click.End

Program.Sub.Form_UnLoad.Start
f.Intrinsic.Control.End
Program.Sub.Form_UnLoad.End

Program.Sub.cmd1_Click.Start
f.Intrinsic.UI.Msgbox("Dummy clicked!")
Program.Sub.cmd1_Click.End

Program.Sub.Comments.Start
${$5$}$3.0.0.0$}$1
${$6$}$nle$}$20220216105414443$}$kjzCRYkA6UEoRnCwndYnRbFO/s06+5AMLTSTEJkJkOFPjY+N+qqODjbDEs22zKp2
Program.Sub.Comments.End